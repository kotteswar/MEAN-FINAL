module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 13);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const devConfig = { MONGO_URL: 'mongodb://localhost:27017/caremanagerapi-dev' };
const testConfig = { MONGO_URL: 'mongodb://localhost:27017/caremanagerapi-test' };
const prodConfig = { MONGO_URL: 'mongodb://localhost:27017/caremanagerapi-prod' };

const defaultConfig = {
    PORT: process.env.PORT || 3003
};

function envConfig(env) {
    switch (env) {
        case 'prod':
            return prodConfig;
        case 'test':
            return testConfig;

        default:
            return devConfig;
    }
}
module.exports = Object.assign({}, defaultConfig, envConfig(process.env.NODE_ENV));

module.exports.secret = "caremanager";

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = require("express");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = require("mongoose");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var morgan = __webpack_require__(24);
var bodyParser = __webpack_require__(21);
var compression = __webpack_require__(22);
var constants = __webpack_require__(0);
var helmet = __webpack_require__(23);
var cors = __webpack_require__(5);
var jwt = __webpack_require__(6);
const isDev = process.env.NODE_ENV === 'development';
const isProd = process.env.NODE_ENV === 'production';
const User = __webpack_require__(4);

module.exports = app => {
    if (isProd) {
        app.use(compression());
        app.use(helmet());
    }
    app.use(cors());
    app.use(bodyParser.json());
    app.use(bodyParser.urlencoded({
        extended: true
    }));

    if (isDev) {
        app.use(morgan('dev'));
    }
};

module.exports.tokenValidation = (req, res, next) => {

    var token = req.body.token || req.query.token || req.headers['x-access-token'];
    // decode token

    if (token) {
        // verifies secret and checks exp
        jwt.verify(token, constants.secret, function (err, decoded) {
            if (err) {
                return res.json({ success: false, message: 'Failed to authenticate token.' });
            } else {
                // if everything is good, save to request for use in other routes
                req.decoded = decoded;
                if (decoded.username) {
                    User.findOne({ Username: decoded.username }, function (err, user) {
                        if (err) {
                            errorHandler(res, "Error Occured");
                        }
                        if (!user) {
                            errorHandler(res, "Error Occured");
                        }
                        next();
                    });
                } else errorHandler(res, "Error Occured");
            }
        });
    } else errorHandler(res, "No token provided.");
};

function errorHandler(res, msg) {
    return res.status(403).send({
        success: false,
        message: msg
    });
}

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const mongoose = __webpack_require__(2);
const Schema = mongoose.Schema;

const userSchema = new Schema({

    Username: { type: String, unique: true },
    Password: { type: String, required: true, select: false },
    FirstName: {
        type: String, required: true
    },
    LastName: {
        type: String, required: true
    },
    DOB: {
        type: Date, required: true
    },
    Gender: {
        type: String, required: true
    },

    EmailAddress: {
        type: String, unique: true, required: true
    },
    CurrentAddress: {
        Street: String,
        City: String,
        State: String,
        Zipcode: String
    },
    Phone: { type: String, required: true },
    EmergencyContact: {
        FirstName: String, LastName: String, Phone: String
    },
    Insurance: {
        ProviderName: String,
        PlanDetails: {
            PolicyName: String, PolicyId: String
        }
    },
    Role: {
        RoleName: { type: String, required: true, unique: true }
    },
    IsEmailVerified: { type: Boolean, default: false },
    IsProfileCompleted: { type: Boolean, default: false },
    VerificationCode: { type: String, default: false },
    CreatedDate: { type: Date, default: Date.now },
    UpdatedDate: { type: Date, default: Date.now }
});

// Export the model
module.exports = mongoose.model('User', userSchema);

/***/ }),
/* 5 */
/***/ (function(module, exports) {

module.exports = require("cors");

/***/ }),
/* 6 */
/***/ (function(module, exports) {

module.exports = require("jsonwebtoken");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var mongoose = __webpack_require__(2);
var constants = __webpack_require__(0);

// Set up mongoose connection

module.exports.dbConnect = () => {
  const mongoDB = constants.MONGO_URL;
  mongoose.connect(mongoDB);
  mongoose.Promise = global.Promise;
  const db = mongoose.connection;
  db.on('error', console.error.bind(console, 'MongoDB connection error:'));
};

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var express = __webpack_require__(1);
var router = express.Router();
var cors = __webpack_require__(5);

router.use(cors());
router.use('/users', __webpack_require__(20));
router.use('/specialty', __webpack_require__(19));
router.use('/facility', __webpack_require__(17));
router.use('/insurance', __webpack_require__(18));

module.exports = router;

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const Facility = __webpack_require__(14);
const constants = __webpack_require__(0);

exports.facilities = function (req, res) {
    Facility.find({}, function (err, facilities) {
        if (err) res.send(err);
        res.send(facilities);
    });
};

exports.facility_create = function (req, res) {
    let facility = new Facility({
        Name: req.body.Name,
        ContactNumber: req.body.ContactNumber,
        FromHours: req.body.FromHours,
        ToHours: req.body.ToHours,
        Address: {
            Street: req.body.CurrentAddress.Street,
            City: req.body.CurrentAddress.City,
            State: req.body.CurrentAddress.State,
            Zipcode: req.body.CurrentAddress.Sipcode
        }
    });

    facility.save(function (err) {
        if (err) {
            res.send(err);
        } else {
            return res.status(200).send({
                success: true
            });
        }
    });
};

exports.facility_update = function (req, res) {
    let facility = {
        Name: req.body.Name,
        ContactNumber: req.body.ContactNumber,
        FromHours: req.body.FromHours,
        ToHours: req.body.ToHours,
        Address: {
            Street: req.body.CurrentAddress.Street,
            City: req.body.CurrentAddress.City,
            State: req.body.CurrentAddress.State,
            Zipcode: req.body.CurrentAddress.Sipcode
        }
    };

    Facility.findOneAndUpdate({ _id: req.params.id }, facility, function (err, facility) {
        if (err) {
            res.send(err);
        }
        if (!facility) {
            errorHandler(res, "Facility Not Found");
        } else {
            return res.status(200).send({
                success: true
            });
        }
    });
};

exports.facility_delete = function (req, res) {
    let facility = {
        Active: false
    };
    Facility.findOneAndUpdate({ _id: req.params.id }, facility, function (err, facility) {
        if (err) res.send(err);
        if (!facility) {
            errorHandler(res, "facility Not Found");
        } else {
            res.send('Deleted successfully!');
        }
    });
};

function errorHandler(res, msg) {
    return res.status(403).send({
        success: false,
        message: msg
    });
}

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const Insurance = __webpack_require__(15);
const constants = __webpack_require__(0);

exports.insurances = function (req, res) {
    Insurance.find({}, function (err, users) {
        if (err) res.send(err);
        res.send(users);
    });
};

exports.insurance_create = function (req, res) {
    const insurance = new Insurance({
        CompanyName: req.body.companyname,
        PlanName: req.body.planname
    });

    insurance.save(function (err) {
        if (err) {
            res.send(err);
        } else {
            return res.status(200).send({
                success: true
            });
        }
    });
};

exports.insurance_update = function (req, res) {
    let insurance = {
        CompanyName: req.body.companyname,
        PlanName: req.body.planname
    };

    Insurance.findOneAndUpdate({ _id: req.params.id }, insurance, function (err, insurance) {
        if (err) {
            res.send(err);
        }
        if (!insurance) {
            errorHandler(res, "Insurance Not Found");
        } else {
            return res.status(200).send({
                success: true
            });
        }
    });
};

exports.insurance_delete = function (req, res) {
    let insurance = {
        Active: false
    };
    Insurance.findOneAndUpdate({ _id: req.params.id }, insurance, function (err, insurance) {
        if (err) res.send(err);
        if (!insurance) {
            errorHandler(res, "Insurance Not Found");
        } else {
            res.send('Deleted successfully!');
        }
    });
};

function errorHandler(res, msg) {
    return res.status(403).send({
        success: false,
        message: msg
    });
}

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const Specialty = __webpack_require__(16);
const constants = __webpack_require__(0);

exports.specialties = function (req, res) {
    Specialty.find({}, function (err, users) {
        if (err) res.send(err);
        res.send(users);
    });
};

exports.specialty_create = function (req, res) {
    const specialty = new Specialty({
        Specialty: req.body.specialty
    });

    specialty.save(function (err) {
        if (err) {
            res.send(err);
        } else {
            return res.status(200).send({
                success: true
            });
        }
    });
};

exports.specialty_update = function (req, res) {
    let specialty = {
        Specialty: req.body.specialty
    };

    Specialty.findOneAndUpdate({ _id: req.params.id }, specialty, function (err, specialty) {
        if (err) {
            res.send(err);
        }
        if (!specialty) {
            errorHandler(res, "Specialty Not Found");
        } else {
            return res.status(200).send({
                success: true
            });
        }
    });
};

exports.specialty_delete = function (req, res) {
    let specialty = {
        Active: false
    };
    Specialty.findOneAndUpdate({ _id: req.params.id }, specialty, function (err, specialty) {
        if (err) res.send(err);
        if (!specialty) {
            errorHandler(res, "Specialty Not Found");
        } else {
            res.send('Deleted successfully!');
        }
    });
};

function errorHandler(res, msg) {
    return res.status(403).send({
        success: false,
        message: msg
    });
}

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const User = __webpack_require__(4);
const constants = __webpack_require__(0);
const jwt = __webpack_require__(6);
const mongoose = __webpack_require__(2);

//Simple version, without validation or sanitation
exports.users = function (req, res) {
    User.find({}, function (err, users) {
        if (err) res.send(err);
        res.send(users);
    });
};
exports.user_login = function (req, res) {

    User.findOne({
        Username: req.body.username,
        Password: req.body.password
    }, function (err, user) {
        if (err) res.send(err);
        if (!user) {
            errorHandler(res, "Error Occured");
        } else {
            // create a token
            var token = jwt.sign({ username: user.Username }, constants.secret, {
                expiresIn: 3600 // expires in 1 hour
            });
            res.status(200).send({ auth: true, token: token, expiryminutes: 60 });
        }
    });
};

exports.user_details = function (req, res) {
    findUser(req.params.id, res);
};
exports.user_update = function (req, res) {

    let user = {
        Username: req.body.email,
        Password: req.body.password,
        FirstName: req.body.firstname,
        LastName: req.body.lastname,
        EmailAddress: req.body.email,
        Gender: req.body.gender,
        DOB: req.body.dob,
        Phone: req.body.phone,
        CurrentAddress: {
            Street: req.body.CurrentAddress.street,
            City: req.body.CurrentAddress.city,
            State: req.body.CurrentAddress.state,
            Zipcode: req.body.CurrentAddress.zipcode
        },
        EmergencyContact: {
            FirstName: req.body.emergencycontact.firstname,
            LastName: req.body.emergencycontact.lastname,
            Phone: req.body.emergencycontact.phone
        },
        Insurance: {
            ProviderName: req.body.Insurance.providername,
            PlanDetails: {
                PolicyName: req.body.Insurance.planDetails.policyname,
                PolicyId: req.body.Insurance.planDetails.policyid
            }
        },
        IsProfileCompleted: req.body.isprofilecompleted,
        IsEmailVerified: req.body.isemailverified
    };

    User.findOneAndUpdate({ _id: req.params.id }, user, function (err, user) {
        if (err) res.send(err);
        if (!user) {
            errorHandler(res, "User Not Found");
        } else {
            findUser(req.params.id, res);
        }
    });
};

exports.user_delete = function (req, res) {
    User.findOneAndDelete(req.params.id, function (err, user) {
        if (err) res.send(err);
        if (!user) {
            errorHandler(res, "User Not Found");
        } else {
            res.send('Deleted successfully!');
        }
    });
};

exports.user_reset = function (req, res) {
    let id = req.params.id;
    let verificationCode = Math.floor(Math.random() * 90000) + 100000;
    let user = {
        VerificationCode: verificationCode
    };
    User.findOneAndUpdate({ $or: [{ EmailAddress: id }, { Phone: id }] }, user, function (err, user) {
        if (err) res.send(err);
        if (!user) {
            errorHandler(res, "User Not Found");
        } else {
            res.status(200).send({ verificationCode: verificationCode });
        }
    });
};

exports.user_reset_pwd = function (req, res) {
    let id = req.params.id;

    let user = {
        Password: req.body.password
    };

    User.findOneAndUpdate({ _id: req.params.id }, user, function (err, user) {
        if (err) res.send(err);
        if (!user) {
            errorHandler(res, "User Not Found");
        } else {
            findUser(req.params.id, res);
        }
    });
};

exports.user_create = function (req, res) {
    let user = new User({
        Username: req.body.email,
        Password: req.body.password,
        FirstName: req.body.firstname,
        LastName: req.body.lastname,
        EmailAddress: req.body.email,
        Gender: req.body.gender,
        DOB: req.body.dob,
        Phone: req.body.phone,
        Role: {
            RoleName: "Member"
        }
    });
    user.save(function (err) {
        if (err) {
            if (err.code === 11000) {
                errorHandler(res, "Email already exist");
            } else {
                res.send(err);
            }
        } else {
            findUser(user.id, res);
        }
    });
};

async function findUser(id, res) {
    await User.findById(id, function (err, inserteduser) {
        if (err) {
            res.send(err);
        } else {
            return res.status(200).send({
                success: true,
                user: inserteduser
            });
        }
    });
}

function errorHandler(res, msg) {
    return res.status(403).send({
        success: false,
        message: msg
    });
}

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* eslint-disable no-console */
var express = __webpack_require__(1);
var constants = __webpack_require__(0);
var middleware = __webpack_require__(3);
var dbconnection = __webpack_require__(7);

const app = express();
middleware(app);

dbconnection.dbConnect();

const router = __webpack_require__(8);

app.use('/', router);

app.listen(constants.PORT, err => {
    if (err) {
        throw err;
    } else {
        console.log(`Server running on port: ${constants.PORT} `);
    }
});

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const mongoose = __webpack_require__(2);
const Schema = mongoose.Schema;

const facilitySchema = new Schema({

    Name: { type: String, unique: true, required: true },
    CurrentAddress: {
        Street: String,
        City: String,
        State: String,
        Zipcode: String
    },
    ContactNumber: { type: String, required: true },
    FromHours: { type: String, default: false },
    ToHours: { type: String, default: false },
    Active: { type: Boolean, default: true },
    CreatedDate: { type: Date, default: Date.now },
    UpdatedDate: { type: Date, default: Date.now }
});

// Export the model
module.exports = mongoose.model('Facility', facilitySchema);

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const mongoose = __webpack_require__(2);
const Schema = mongoose.Schema;

const insuranceSchema = new Schema({
    CompanyName: { type: String, unique: true, required: true },
    PlanName: { type: String, unique: true, required: true },
    Active: { type: Boolean, default: true },
    CreatedDate: { type: Date, default: Date.now },
    UpdatedDate: { type: Date, default: Date.now }
});

module.exports = mongoose.model('Insurance', insuranceSchema);

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const mongoose = __webpack_require__(2);
const Schema = mongoose.Schema;

const specialtySchema = new Schema({
    Specialty: { type: String, unique: true, required: true },
    Active: { type: Boolean, default: true },
    CreatedDate: { type: Date, default: Date.now },
    UpdatedDate: { type: Date, default: Date.now }
});

module.exports = mongoose.model('Specialty', specialtySchema);

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const express = __webpack_require__(1);
const router = express.Router();
const facility_controller = __webpack_require__(9);
const middleware = __webpack_require__(3);

router.get('/', middleware.tokenValidation, facility_controller.facilities);
router.post('/create', middleware.tokenValidation, facility_controller.facility_create);
router.put('/:id/update', middleware.tokenValidation, facility_controller.facility_update);
router.post('/:id/delete', middleware.tokenValidation, facility_controller.facility_delete);

module.exports = router;

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const express = __webpack_require__(1);
const router = express.Router();
const insurance_controller = __webpack_require__(10);
const middleware = __webpack_require__(3);

router.get('/', middleware.tokenValidation, insurance_controller.insurances);
router.post('/create', middleware.tokenValidation, insurance_controller.insurance_create);
router.put('/:id/update', middleware.tokenValidation, insurance_controller.insurance_update);
router.post('/:id/delete', middleware.tokenValidation, insurance_controller.insurance_delete);

module.exports = router;

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const express = __webpack_require__(1);
const router = express.Router();
const specialty_controller = __webpack_require__(11);
const middleware = __webpack_require__(3);

router.get('/', middleware.tokenValidation, specialty_controller.specialties);
router.post('/create', middleware.tokenValidation, specialty_controller.specialty_create);
router.put('/:id/update', middleware.tokenValidation, specialty_controller.specialty_update);
router.post('/:id/delete', middleware.tokenValidation, specialty_controller.specialty_delete);

module.exports = router;

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const express = __webpack_require__(1);
const router = express.Router();
const user_controller = __webpack_require__(12);
const middleware = __webpack_require__(3);

router.get('/', middleware.tokenValidation, user_controller.users);
router.post('/login', user_controller.user_login);
router.get('/:id', middleware.tokenValidation, user_controller.user_details);
router.post('/signup', user_controller.user_create);
router.post('/create', middleware.tokenValidation, user_controller.user_create);
router.post('/:id/update', middleware.tokenValidation, user_controller.user_update);
router.delete('/:id/delete', middleware.tokenValidation, user_controller.user_delete);
router.post('/:id/resetcode', middleware.tokenValidation, user_controller.user_reset);
router.post('/:id/resetpwd', middleware.tokenValidation, user_controller.user_reset_pwd);

module.exports = router;

/***/ }),
/* 21 */
/***/ (function(module, exports) {

module.exports = require("body-parser");

/***/ }),
/* 22 */
/***/ (function(module, exports) {

module.exports = require("compression");

/***/ }),
/* 23 */
/***/ (function(module, exports) {

module.exports = require("helmet");

/***/ }),
/* 24 */
/***/ (function(module, exports) {

module.exports = require("morgan");

/***/ })
/******/ ]);