module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 9);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const devConfig = { MONGO_URL: 'mongodb://localhost:27017/caremanagerapi-dev' };
const testConfig = { MONGO_URL: 'mongodb://localhost:27017/caremanagerapi-test' };
const prodConfig = { MONGO_URL: 'mongodb://localhost:27017/caremanagerapi-prod' };

const defaultConfig = {
    PORT: process.env.PORT || 3003
};

function envConfig(env) {
    switch (env) {
        case 'prod':
            return prodConfig;
        case 'test':
            return testConfig;

        default:
            return devConfig;
    }
}
module.exports = Object.assign({}, defaultConfig, envConfig(process.env.NODE_ENV));

module.exports.secret = "caremanager";

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var morgan = __webpack_require__(14);
var bodyParser = __webpack_require__(10);
var compression = __webpack_require__(11);
var constants = __webpack_require__(0);
var helmet = __webpack_require__(13);
var cors = __webpack_require__(12);
var jwt = __webpack_require__(4);
const isDev = process.env.NODE_ENV === 'development';
const isProd = process.env.NODE_ENV === 'production';
const User = __webpack_require__(3);

module.exports = app => {
    if (isProd) {
        app.use(compression());
        app.use(helmet());
    }
    app.use(cors());
    app.use(bodyParser.json());
    app.use(bodyParser.urlencoded({
        extended: true
    }));

    if (isDev) {
        app.use(morgan('dev'));
    }
};

module.exports.tokenValidation = (req, res, next) => {

    var token = req.body.token || req.query.token || req.headers['x-access-token'];
    // decode token

    if (token) {
        // verifies secret and checks exp
        jwt.verify(token, constants.secret, function (err, decoded) {
            if (err) {
                return res.json({ success: false, message: 'Failed to authenticate token.' });
            } else {
                // if everything is good, save to request for use in other routes
                req.decoded = decoded;
                if (decoded.username) {
                    User.findOne({ Username: decoded.username }, function (err, user) {
                        if (err) {
                            errorHandler(res, "Error Occured");
                        }
                        if (!user) {
                            errorHandler(res, "Error Occured");
                        }
                        next();
                    });
                } else errorHandler(res, "Error Occured");
            }
        });
    } else errorHandler(res, "No token provided.");
};

function errorHandler(res, msg) {
    return res.status(403).send({
        success: false,
        message: msg
    });
}

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = require("express");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const mongoose = __webpack_require__(5);
const Schema = mongoose.Schema;

const userSchema = new Schema({

    Username: { type: String, unique: true, required: true },
    Password: { type: String, required: true },
    FirstName: {
        type: String, required: true
    },
    LastName: {
        type: String, required: true
    },
    DOB: {
        type: Date, required: true
    },
    Gender: {
        type: String, required: true
    },

    EmailAddress: {
        type: String, unique: true, required: true
    },
    CurrentAddress: {
        FlatNo: Number,
        Address1: String,
        Address2: String,
        Zipcode: String
    },
    Phone: { type: String, required: true },
    EmergencyContact: { type: String },
    CreatedDate: { type: Date, default: Date.now }

});

// Export the model
module.exports = mongoose.model('User', userSchema);

/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = require("jsonwebtoken");

/***/ }),
/* 5 */
/***/ (function(module, exports) {

module.exports = require("mongoose");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var mongoose = __webpack_require__(5);
var constants = __webpack_require__(0);

// Set up mongoose connection

module.exports.dbConnect = () => {
  const mongoDB = constants.MONGO_URL;
  mongoose.connect(mongoDB);
  mongoose.Promise = global.Promise;
  const db = mongoose.connection;
  db.on('error', console.error.bind(console, 'MongoDB connection error:'));
};

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const express = __webpack_require__(2);
const router = express.Router();
const user_controller = __webpack_require__(8);
const middleware = __webpack_require__(1);

router.get('/', middleware.tokenValidation, user_controller.users);
router.post('/login', user_controller.user_login);
router.get('/:id', middleware.tokenValidation, user_controller.user_details);
router.post('/create', middleware.tokenValidation, user_controller.user_create);
router.post('/:id/update', middleware.tokenValidation, user_controller.user_update);
router.delete('/:id/delete', middleware.tokenValidation, user_controller.user_delete);

module.exports = router;

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const User = __webpack_require__(3);
const constants = __webpack_require__(0);
const jwt = __webpack_require__(4);

//Simple version, without validation or sanitation
exports.users = function (req, res) {
    User.find({}, function (err, users) {
        if (err) res.send(err);
        res.send(users);
    });
};
exports.user_login = function (req, res) {

    User.findOne({ Username: req.body.username,
        Password: req.body.password }, function (err, user) {
        if (err) res.send(err);
        // create a token
        var token = jwt.sign({ username: user.Username }, constants.secret, {
            expiresIn: 3600 // expires in 1 hour
        });
        res.status(200).send({ auth: true, token: token });
    });
};

exports.user_details = function (req, res) {
    User.findById(req.params.id, function (err, user) {
        if (err) res.send(err);
        res.send(user);
    });
};
exports.user_update = function (req, res) {

    let user = {
        Username: req.body.username,
        Password: req.body.password,
        FirstName: req.body.firstname,
        LastName: req.body.lastname,
        EmailAddress: req.body.email,
        Gender: req.body.gender,
        DOB: req.body.dob,
        Phone: req.body.phone,
        EmergencyContact: req.body.emergencycontact,
        CurrentAddress: {
            FlatNo: req.body.Current_Address.flatno,
            Address1: req.body.Current_Address.address1,
            Address2: req.body.Current_Address.address2,
            Zipcode: req.body.Current_Address.zipcode
        }
    };

    User.findOneAndUpdate({ _id: req.params.id }, user, function (err, user) {
        if (err) {
            res.send(err);
        }
        res.send(user);
    });
};

exports.user_delete = function (req, res) {
    User.findOneAndDelete(req.params.id, function (err) {
        if (err) res.send(err);
        res.send('Deleted successfully!');
    });
};

exports.user_create = function (req, res) {
    let user = new User({
        Username: req.body.username,
        Password: req.body.password,
        FirstName: req.body.firstname,
        LastName: req.body.lastname,
        EmailAddress: req.body.email,
        Gender: req.body.gender,
        DOB: req.body.dob,
        Phone: req.body.phone,
        EmergencyContact: req.body.emergencycontact,
        CurrentAddress: {
            FlatNo: req.body.Current_Address.flatno,
            Address1: req.body.Current_Address.address1,
            Address2: req.body.Current_Address.address2,
            Zipcode: req.body.Current_Address.zipcode
        }
    });
    user.save(function (err) {
        if (err) {
            res.send(err);
        }
        res.send('User Created successfully');
    });
};

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* eslint-disable no-console */
var express = __webpack_require__(2);
var constants = __webpack_require__(0);
var middleware = __webpack_require__(1);
var dbconnection = __webpack_require__(6);

const app = express();
middleware(app);

dbconnection.dbConnect();

const users = __webpack_require__(7);
app.use('/users', users);

app.listen(constants.PORT, err => {
    if (err) {
        throw err;
    } else {
        console.log(`Server running on port: ${constants.PORT} `);
    }
});

/***/ }),
/* 10 */
/***/ (function(module, exports) {

module.exports = require("body-parser");

/***/ }),
/* 11 */
/***/ (function(module, exports) {

module.exports = require("compression");

/***/ }),
/* 12 */
/***/ (function(module, exports) {

module.exports = require("cors");

/***/ }),
/* 13 */
/***/ (function(module, exports) {

module.exports = require("helmet");

/***/ }),
/* 14 */
/***/ (function(module, exports) {

module.exports = require("morgan");

/***/ })
/******/ ]);